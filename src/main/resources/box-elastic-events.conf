akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "OFF"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

}
box {
  platform {
    client.id = ""
    client.secret = ""
    enterprise.id = ""
    public.key.id = ""
    private.key.file = "private_key.pem"
    private.key.password = ""
    max.cache.entries = 100
    config.path = ""
    # The lookback config is only used on initial creation of the ES index.
    # If the ES index is already created, the last created_at date will be retrieved from ES.
    # Use a lookback value of 0 if you would like to exclude a specific time frame such as days.
    # Example: seconds = 60, minutes = 60, hours = 1, days = 0 to designate 1 hour
    lookback {
      seconds = 60
      minutes = 60
      hours = 24
      days = 365
    }
  }
}
elastic {
  host = "localhost"
  cluster.name = "elasticsearch"
  index.name = "box"
  index.num.shards = 1
  index.num.replicas = 1
  # Future Actor timeout in seconds
  futures.timeout = 15
  client {
    transport {
      port = 9300
      # timeout in seconds
      sniff = true
      ping.timeout = 20
      nodes.sampler.interval = 20
    }
    rest {
      port = 9200
      # timeouts in milliseconds
      connection.timeout = 10000
      socket.timeout = 60000
      connection.request.timeout = 10000
      max.retry.timeout = 60000
    }
  }
  enterprise {
    mapping = "enterprise-event-mapping.json"
    type = "enterprise"
    max.created.at = "get_last_es_doc.json"
    # polling interval in minutes
    polling.interval = 2
  }
  # Placeholder for v1.1
  governance {
    mapping = "governance-event-mapping.json"
    type = "governance"
  }
}
